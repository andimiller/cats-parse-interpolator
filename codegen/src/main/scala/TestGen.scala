import cats.effect.IO
import fs2._
import fs2.io.file.Path

object TestGen extends CodeGen[IO] {

  def template(interpolator: String, parserVal: String, inputType: String, spacing: Boolean = false)(paramCount: Int) = {
    val result = (0 to 22).take(paramCount).map(i => s"inputs($i)").mkString("(", ", ", ")")
    val parser = List
      .fill(paramCount)("$" + parserVal)
      .mkString(if (spacing) " " else "")
      .prependedAll(if (spacing) " " else "")
      .appendedAll(if (spacing) " " else "")
    val input  = if (spacing) """inputs.mkString(" ", " ", " ")""" else "inputs.mkString"
    s"""
       |  property("$interpolator with $parserVal taking $inputType $paramCount times ${if (spacing) "with" else "without"} spacing") {
       |    val parser = $interpolator"$parser"
       |    implicit val gen: Arbitrary[List[$inputType]] = Arbitrary(Gen.listOfN($paramCount, implicitly[Arbitrary[Boolean]].arbitrary))
       |    forAll { (inputs: List[$inputType]) =>
       |      val input: String = $input
       |      parser.parseAll(input) == $result.asRight
       |    }
       |  }
       |""".stripMargin
  }

  val head =
    """package net.andimiller.cats.parse.interpolator
      |
      |import cats.parse._
      |import cats.implicits._
      |import munit._
      |import org.scalacheck.Prop._
      |import org.scalacheck._
      |import eu.timepit.refined.scalacheck._
      |import eu.timepit.refined.api._
      |
      |// THIS FILE IS AUTOGENERATED USING TEMPLATES, SEE CODEGEN MODULE
      |class GeneratedInterpolatorSpec extends ScalaCheckSuite {
      |
      |  val boolean = p"true".as(true).orElse(p"false".as(false))
      |""".stripMargin
  val tail =
    """
      |}
      |""".stripMargin

  override def file: Path = Path("./core/src/test/scala/net/andimiller/cats/parse/interpolator/GeneratedInterpolatorSpec.scala")

  override def contents: Stream[IO, String] = {
    val pbool    = template("p", "boolean", "Boolean")(_)
    val p0bool   = template("p0", "boolean", "Boolean")(_)
    val pmbool   = template("pm", "boolean", "Boolean")(_)
    val pbools   = template("p", "boolean", "Boolean", spacing = true)(_)
    val p0bools  = template("p0", "boolean", "Boolean", spacing = true)(_)
    val pmbools  = template("pm", "boolean", "Boolean", spacing = true)(_)
    val generate =
      List(
        List(head),
        (1 to 22).map(pbool),
        (1 to 22).map(p0bool),
        (1 to 22).map(pmbool),
        (1 to 22).map(pbools),
        (1 to 22).map(p0bools),
        (1 to 22).map(pmbools),
        List(tail)
      ).flatten

    Stream
      .emits(generate)
      .covary[IO]
  }

}
