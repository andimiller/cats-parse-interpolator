package net.andimiller.cats.parse.interpolator

import cats.parse._
import cats.implicits._
import munit._
import org.scalacheck.Prop._
import org.scalacheck._
import eu.timepit.refined.scalacheck._
import eu.timepit.refined.api._

// THIS FILE IS AUTOGENERATED USING TEMPLATES, SEE CODEGEN MODULE
class GeneratedInterpolatorSpec extends ScalaCheckSuite {

  val boolean = p"true".as(true).orElse(p"false".as(false))

  property("p with boolean taking Boolean 1 times without spacing") {
    val parser                                 = p"$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(1, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0)).asRight
    }
  }

  property("p with boolean taking Boolean 2 times without spacing") {
    val parser                                 = p"$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(2, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1)).asRight
    }
  }

  property("p with boolean taking Boolean 3 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(3, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2)).asRight
    }
  }

  property("p with boolean taking Boolean 4 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(4, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3)).asRight
    }
  }

  property("p with boolean taking Boolean 5 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(5, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4)).asRight
    }
  }

  property("p with boolean taking Boolean 6 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(6, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5)).asRight
    }
  }

  property("p with boolean taking Boolean 7 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(7, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6)).asRight
    }
  }

  property("p with boolean taking Boolean 8 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(8, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7)).asRight
    }
  }

  property("p with boolean taking Boolean 9 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(9, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7), inputs(8)).asRight
    }
  }

  property("p with boolean taking Boolean 10 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(10, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 11 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(11, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 12 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(12, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 13 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(13, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 14 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(14, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 15 times without spacing") {
    val parser                                 = p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(15, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 16 times without spacing") {
    val parser                                 =
      p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(16, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 17 times without spacing") {
    val parser                                 =
      p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(17, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 18 times without spacing") {
    val parser                                 =
      p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(18, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 19 times without spacing") {
    val parser                                 =
      p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(19, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 20 times without spacing") {
    val parser                                 =
      p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(20, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 21 times without spacing") {
    val parser                                 =
      p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(21, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 22 times without spacing") {
    val parser                                 =
      p"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(22, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20),
        inputs(21)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 1 times without spacing") {
    val parser                                 = p0"$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(1, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0)).asRight
    }
  }

  property("p0 with boolean taking Boolean 2 times without spacing") {
    val parser                                 = p0"$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(2, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1)).asRight
    }
  }

  property("p0 with boolean taking Boolean 3 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(3, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2)).asRight
    }
  }

  property("p0 with boolean taking Boolean 4 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(4, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3)).asRight
    }
  }

  property("p0 with boolean taking Boolean 5 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(5, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4)).asRight
    }
  }

  property("p0 with boolean taking Boolean 6 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(6, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5)).asRight
    }
  }

  property("p0 with boolean taking Boolean 7 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(7, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6)).asRight
    }
  }

  property("p0 with boolean taking Boolean 8 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(8, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7)).asRight
    }
  }

  property("p0 with boolean taking Boolean 9 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(9, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7), inputs(8)).asRight
    }
  }

  property("p0 with boolean taking Boolean 10 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(10, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 11 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(11, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 12 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(12, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 13 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(13, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 14 times without spacing") {
    val parser                                 = p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(14, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 15 times without spacing") {
    val parser                                 =
      p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(15, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 16 times without spacing") {
    val parser                                 =
      p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(16, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 17 times without spacing") {
    val parser                                 =
      p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(17, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 18 times without spacing") {
    val parser                                 =
      p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(18, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 19 times without spacing") {
    val parser                                 =
      p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(19, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 20 times without spacing") {
    val parser                                 =
      p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(20, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 21 times without spacing") {
    val parser                                 =
      p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(21, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 22 times without spacing") {
    val parser                                 =
      p0"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(22, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20),
        inputs(21)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 1 times without spacing") {
    val parser                                 = pm"$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(1, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0)).asRight
    }
  }

  property("pm with boolean taking Boolean 2 times without spacing") {
    val parser                                 = pm"$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(2, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1)).asRight
    }
  }

  property("pm with boolean taking Boolean 3 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(3, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2)).asRight
    }
  }

  property("pm with boolean taking Boolean 4 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(4, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3)).asRight
    }
  }

  property("pm with boolean taking Boolean 5 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(5, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4)).asRight
    }
  }

  property("pm with boolean taking Boolean 6 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(6, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5)).asRight
    }
  }

  property("pm with boolean taking Boolean 7 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(7, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6)).asRight
    }
  }

  property("pm with boolean taking Boolean 8 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(8, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7)).asRight
    }
  }

  property("pm with boolean taking Boolean 9 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(9, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7), inputs(8)).asRight
    }
  }

  property("pm with boolean taking Boolean 10 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(10, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 11 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(11, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 12 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(12, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 13 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(13, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 14 times without spacing") {
    val parser                                 = pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(14, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 15 times without spacing") {
    val parser                                 =
      pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(15, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 16 times without spacing") {
    val parser                                 =
      pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(16, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 17 times without spacing") {
    val parser                                 =
      pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(17, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 18 times without spacing") {
    val parser                                 =
      pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(18, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 19 times without spacing") {
    val parser                                 =
      pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(19, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 20 times without spacing") {
    val parser                                 =
      pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(20, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 21 times without spacing") {
    val parser                                 =
      pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(21, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 22 times without spacing") {
    val parser                                 =
      pm"$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean$boolean"
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(22, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20),
        inputs(21)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 1 times with spacing") {
    val parser                                 = p" $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(1, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0)).asRight
    }
  }

  property("p with boolean taking Boolean 2 times with spacing") {
    val parser                                 = p" $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(2, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1)).asRight
    }
  }

  property("p with boolean taking Boolean 3 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(3, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2)).asRight
    }
  }

  property("p with boolean taking Boolean 4 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(4, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3)).asRight
    }
  }

  property("p with boolean taking Boolean 5 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(5, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4)).asRight
    }
  }

  property("p with boolean taking Boolean 6 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(6, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5)).asRight
    }
  }

  property("p with boolean taking Boolean 7 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(7, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6)).asRight
    }
  }

  property("p with boolean taking Boolean 8 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(8, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7)).asRight
    }
  }

  property("p with boolean taking Boolean 9 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(9, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7), inputs(8)).asRight
    }
  }

  property("p with boolean taking Boolean 10 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(10, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 11 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(11, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 12 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(12, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 13 times with spacing") {
    val parser                                 = p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(13, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 14 times with spacing") {
    val parser                                 =
      p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(14, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 15 times with spacing") {
    val parser                                 =
      p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(15, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 16 times with spacing") {
    val parser                                 =
      p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(16, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 17 times with spacing") {
    val parser                                 =
      p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(17, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 18 times with spacing") {
    val parser                                 =
      p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(18, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 19 times with spacing") {
    val parser                                 =
      p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(19, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 20 times with spacing") {
    val parser                                 =
      p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(20, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 21 times with spacing") {
    val parser                                 =
      p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(21, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20)
      ).asRight
    }
  }

  property("p with boolean taking Boolean 22 times with spacing") {
    val parser                                 =
      p" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(22, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20),
        inputs(21)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 1 times with spacing") {
    val parser                                 = p0" $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(1, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0)).asRight
    }
  }

  property("p0 with boolean taking Boolean 2 times with spacing") {
    val parser                                 = p0" $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(2, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1)).asRight
    }
  }

  property("p0 with boolean taking Boolean 3 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(3, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2)).asRight
    }
  }

  property("p0 with boolean taking Boolean 4 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(4, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3)).asRight
    }
  }

  property("p0 with boolean taking Boolean 5 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(5, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4)).asRight
    }
  }

  property("p0 with boolean taking Boolean 6 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(6, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5)).asRight
    }
  }

  property("p0 with boolean taking Boolean 7 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(7, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6)).asRight
    }
  }

  property("p0 with boolean taking Boolean 8 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(8, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7)).asRight
    }
  }

  property("p0 with boolean taking Boolean 9 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(9, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7), inputs(8)).asRight
    }
  }

  property("p0 with boolean taking Boolean 10 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(10, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 11 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(11, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 12 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(12, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 13 times with spacing") {
    val parser                                 = p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(13, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 14 times with spacing") {
    val parser                                 =
      p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(14, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 15 times with spacing") {
    val parser                                 =
      p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(15, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 16 times with spacing") {
    val parser                                 =
      p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(16, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 17 times with spacing") {
    val parser                                 =
      p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(17, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 18 times with spacing") {
    val parser                                 =
      p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(18, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 19 times with spacing") {
    val parser                                 =
      p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(19, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 20 times with spacing") {
    val parser                                 =
      p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(20, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 21 times with spacing") {
    val parser                                 =
      p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(21, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20)
      ).asRight
    }
  }

  property("p0 with boolean taking Boolean 22 times with spacing") {
    val parser                                 =
      p0" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(22, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20),
        inputs(21)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 1 times with spacing") {
    val parser                                 = pm" $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(1, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0)).asRight
    }
  }

  property("pm with boolean taking Boolean 2 times with spacing") {
    val parser                                 = pm" $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(2, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1)).asRight
    }
  }

  property("pm with boolean taking Boolean 3 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(3, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2)).asRight
    }
  }

  property("pm with boolean taking Boolean 4 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(4, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3)).asRight
    }
  }

  property("pm with boolean taking Boolean 5 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(5, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4)).asRight
    }
  }

  property("pm with boolean taking Boolean 6 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(6, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5)).asRight
    }
  }

  property("pm with boolean taking Boolean 7 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(7, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6)).asRight
    }
  }

  property("pm with boolean taking Boolean 8 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(8, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7)).asRight
    }
  }

  property("pm with boolean taking Boolean 9 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(9, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (inputs(0), inputs(1), inputs(2), inputs(3), inputs(4), inputs(5), inputs(6), inputs(7), inputs(8)).asRight
    }
  }

  property("pm with boolean taking Boolean 10 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(10, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 11 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(11, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 12 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(12, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 13 times with spacing") {
    val parser                                 = pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(13, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 14 times with spacing") {
    val parser                                 =
      pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(14, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 15 times with spacing") {
    val parser                                 =
      pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(15, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 16 times with spacing") {
    val parser                                 =
      pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(16, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 17 times with spacing") {
    val parser                                 =
      pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(17, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 18 times with spacing") {
    val parser                                 =
      pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(18, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 19 times with spacing") {
    val parser                                 =
      pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(19, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 20 times with spacing") {
    val parser                                 =
      pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(20, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 21 times with spacing") {
    val parser                                 =
      pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(21, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20)
      ).asRight
    }
  }

  property("pm with boolean taking Boolean 22 times with spacing") {
    val parser                                 =
      pm" $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean $boolean "
    implicit val gen: Arbitrary[List[Boolean]] = Arbitrary(Gen.listOfN(22, implicitly[Arbitrary[Boolean]].arbitrary))
    forAll { (inputs: List[Boolean]) =>
      val input: String = inputs.mkString(" ", " ", " ")
      parser.parseAll(input) == (
        inputs(0),
        inputs(1),
        inputs(2),
        inputs(3),
        inputs(4),
        inputs(5),
        inputs(6),
        inputs(7),
        inputs(8),
        inputs(9),
        inputs(10),
        inputs(11),
        inputs(12),
        inputs(13),
        inputs(14),
        inputs(15),
        inputs(16),
        inputs(17),
        inputs(18),
        inputs(19),
        inputs(20),
        inputs(21)
      ).asRight
    }
  }

}
